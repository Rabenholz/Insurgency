#pragma once
#include <vector>

//here's a nice one for just the colors on their own
enum CursesColor {
	BLACK = 0,
	BLUE,
	GREEN,
	CYAN,
	RED,
	MAGENTA,
	YELLOW,
	WHITE,
	BBLACK,
	BBLUE,
	BGREEN,
	BCYAN,
	BRED,
	BMAGENTA,
	BYELLOW,
	BWHITE
};

//Must be used with curses color-initialization in a for loop
//Definitions of all the color pairs, using the following template:
//FOREGROUND_BACKGROUND
//Colors are defined either by their color (GREEN), or the bolded version of their color (BGREEN)
//In order to specify foreground and background colors seperately: 
//foreground: add n to the color
//background: add 16n to the color

enum CursesColorPair {
	BLACK_BLACK,
	BLUE_BLACK,
	GREEN_BLACK,
	CYAN_BLACK,
	RED_BLACK,
	MAGENTA_BLACK,
	YELLOW_BLACK,
	WHITE_BLACK,
	BBLACK_BLACK,
	BBLUE_BLACK,
	BGREEN_BLACK,
	BCYAN_BLACK,
	BRED_BLACK,
	BMAGENTA_BLACK,
	BYELLOW_BLACK,
	BWHITE_BLACK,

	BLACK_BLUE,
	BLUE_BLUE,
	GREEN_BLUE,
	CYAN_BLUE,
	RED_BLUE,
	MAGENTA_BLUE,
	YELLOW_BLUE,
	WHITE_BLUE,
	BBLACK_BLUE,
	BBLUE_BLUE,
	BGREEN_BLUE,
	BCYAN_BLUE,
	BRED_BLUE,
	BMAGENTA_BLUE,
	BYELLOW_BLUE,
	BWHITE_BLUE,

	BLACK_GREEN,
	BLUE_GREEN,
	GREEN_GREEN,
	CYAN_GREEN,
	RED_GREEN,
	MAGENTA_GREEN,
	YELLOW_GREEN,
	WHITE_GREEN,
	BBLACK_GREEN,
	BBLUE_GREEN,
	BGREEN_GREEN,
	BCYAN_GREEN,
	BRED_GREEN,
	BMAGENTA_GREEN,
	BYELLOW_GREEN,
	BWHITE_GREEN,

	BLACK_CYAN,
	BLUE_CYAN,
	GREEN_CYAN,
	CYAN_CYAN,
	RED_CYAN,
	MAGENTA_CYAN,
	YELLOW_CYAN,
	WHITE_CYAN,
	BBLACK_CYAN,
	BBLUE_CYAN,
	BGREEN_CYAN,
	BCYAN_CYAN,
	BRED_CYAN,
	BMAGENTA_CYAN,
	BYELLOW_CYAN,
	BWHITE_CYAN,

	BLACK_RED,
	BLUE_RED,
	GREEN_RED,
	CYAN_RED,
	RED_RED,
	MAGENTA_RED,
	YELLOW_RED,
	WHITE_RED,
	BBLACK_RED,
	BBLUE_RED,
	BGREEN_RED,
	BCYAN_RED,
	BRED_RED,
	BMAGENTA_RED,
	BYELLOW_RED,
	BWHITE_RED,

	BLACK_MAGENTA,
	BLUE_MAGENTA,
	GREEN_MAGENTA,
	CYAN_MAGENTA,
	RED_MAGENTA,
	MAGENTA_MAGENTA,
	YELLOW_MAGENTA,
	WHITE_MAGENTA,
	BBLACK_MAGENTA,
	BBLUE_MAGENTA,
	BGREEN_MAGENTA,
	BCYAN_MAGENTA,
	BRED_MAGENTA,
	BMAGENTA_MAGENTA,
	BYELLOW_MAGENTA,
	BWHITE_MAGENTA,

	BLACK_YELLOW,
	BLUE_YELLOW,
	GREEN_YELLOW,
	CYAN_YELLOW,
	RED_YELLOW,
	MAGENTA_YELLOW,
	YELLOW_YELLOW,
	WHITE_YELLOW,
	BBLACK_YELLOW,
	BBLUE_YELLOW,
	BGREEN_YELLOW,
	BCYAN_YELLOW,
	BRED_YELLOW,
	BMAGENTA_YELLOW,
	BYELLOW_YELLOW,
	BWHITE_YELLOW,

	BLACK_WHITE,
	BLUE_WHITE,
	GREEN_WHITE,
	CYAN_WHITE,
	RED_WHITE,
	MAGENTA_WHITE,
	YELLOW_WHITE,
	WHITE_WHITE,
	BBLACK_WHITE,
	BBLUE_WHITE,
	BGREEN_WHITE,
	BCYAN_WHITE,
	BRED_WHITE,
	BMAGENTA_WHITE,
	BYELLOW_WHITE,
	BWHITE_WHITE,

	BLACK_BBLACK,
	BLUE_BBLACK,
	GREEN_BBLACK,
	CYAN_BBLACK,
	RED_BBLACK,
	MAGENTA_BBLACK,
	YELLOW_BBLACK,
	WHITE_BBLACK,
	BBLACK_BBLACK,
	BBLUE_BBLACK,
	BGREEN_BBLACK,
	BCYAN_BBLACK,
	BRED_BBLACK,
	BMAGENTA_BBLACK,
	BYELLOW_BBLACK,
	BWHITE_BBLACK,

	BLACK_BBLUE,
	BLUE_BBLUE,
	GREEN_BBLUE,
	CYAN_BBLUE,
	RED_BBLUE,
	MAGENTA_BBLUE,
	YELLOW_BBLUE,
	WHITE_BBLUE,
	BBLACK_BBLUE,
	BBLUE_BBLUE,
	BGREEN_BBLUE,
	BCYAN_BBLUE,
	BRED_BBLUE,
	BMAGENTA_BBLUE,
	BYELLOW_BBLUE,
	BWHITE_BBLUE,

	BLACK_BGREEN,
	BLUE_BGREEN,
	GREEN_BGREEN,
	CYAN_BGREEN,
	RED_BGREEN,
	MAGENTA_BGREEN,
	YELLOW_BGREEN,
	WHITE_BGREEN,
	BBLACK_BGREEN,
	BBLUE_BGREEN,
	BGREEN_BGREEN,
	BCYAN_BGREEN,
	BRED_BGREEN,
	BMAGENTA_BGREEN,
	BYELLOW_BGREEN,
	BWHITE_BGREEN,

	BLACK_BCYAN,
	BLUE_BCYAN,
	GREEN_BCYAN,
	CYAN_BCYAN,
	RED_BCYAN,
	MAGENTA_BCYAN,
	YELLOW_BCYAN,
	WHITE_BCYAN,
	BBLACK_BCYAN,
	BBLUE_BCYAN,
	BGREEN_BCYAN,
	BCYAN_BCYAN,
	BRED_BCYAN,
	BMAGENTA_BCYAN,
	BYELLOW_BCYAN,
	BWHITE_BCYAN,

	BLACK_BRED,
	BLUE_BRED,
	GREEN_BRED,
	CYAN_BRED,
	RED_BRED,
	MAGENTA_BRED,
	YELLOW_BRED,
	WHITE_BRED,
	BBLACK_BRED,
	BBLUE_BRED,
	BGREEN_BRED,
	BCYAN_BRED,
	BRED_BRED,
	BMAGENTA_BRED,
	BYELLOW_BRED,
	BWHITE_BRED,

	BLACK_BMAGENTA,
	BLUE_BMAGENTA,
	GREEN_BMAGENTA,
	CYAN_BMAGENTA,
	RED_BMAGENTA,
	MAGENTA_BMAGENTA,
	YELLOW_BMAGENTA,
	WHITE_BMAGENTA,
	BBLACK_BMAGENTA,
	BBLUE_BMAGENTA,
	BGREEN_BMAGENTA,
	BCYAN_BMAGENTA,
	BRED_BMAGENTA,
	BMAGENTA_BMAGENTA,
	BYELLOW_BMAGENTA,
	BWHITE_BMAGENTA,

	BLACK_BYELLOW,
	BLUE_BYELLOW,
	GREEN_BYELLOW,
	CYAN_BYELLOW,
	RED_BYELLOW,
	MAGENTA_BYELLOW,
	YELLOW_BYELLOW,
	WHITE_BYELLOW,
	BBLACK_BYELLOW,
	BBLUE_BYELLOW,
	BGREEN_BYELLOW,
	BCYAN_BYELLOW,
	BRED_BYELLOW,
	BMAGENTA_BYELLOW,
	BYELLOW_BYELLOW,
	BWHITE_BYELLOW,

	BLACK_BWHITE,
	BLUE_BWHITE,
	GREEN_BWHITE,
	CYAN_BWHITE,
	RED_BWHITE,
	MAGENTA_BWHITE,
	YELLOW_BWHITE,
	WHITE_BWHITE,
	BBLACK_BWHITE,
	BBLUE_BWHITE,
	BGREEN_BWHITE,
	BCYAN_BWHITE,
	BRED_BWHITE,
	BMAGENTA_BWHITE,
	BYELLOW_BWHITE,
	BWHITE_BWHITE,

};

//Definitions of color pairs that may be associated by something other than color
//take this nice function
namespace CursesColorList
{
	inline CursesColorPair makeColorPair(CursesColor fgColor, CursesColor bgColor)
	{
		return CursesColorPair(16*bgColor + fgColor);
	}

	inline std::pair<CursesColor,CursesColor> getSeperateColors(CursesColorPair colorPair)
	{
		std::pair<CursesColor,CursesColor> colors(CursesColor(colorPair%16), CursesColor(colorPair/16));
		return colors;
	}
}